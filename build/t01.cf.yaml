AWSTemplateFormatVersion: 2010-09-09
Parameters:
  BucketCodeName:
    Description: The name of code bucket.
    Type: String
  WikiUserName:
    Description: The name of wiki user.
    Type: String
  WikiPassword:
    Description: The password of wiki user.
    Type: String
  WikiProtectUserName:
    Description: The name of wiki user.
    Type: String
  WikiProtectPassword:
    Description: The password of wiki user.
    Type: String
  WikiDeleteUserName:
    Description: The name of wiki user.
    Type: String
  WikiDeletePassword:
    Description: The password of wiki user.
    Type: String
  ImageVersion:
    Description: Trick for force deploy
    Type: String



Resources:

  MarketValueLambdaIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      RoleName: Market-value-lambda-role
      Policies:
        - PolicyName: Lambda-execution-basic
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ses:SendEmail'
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: '*'

  MarketValueLambda:
    DependsOn:
      - MarketValueLambdaIamRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt MarketValueLambdaIamRole.Arn
      FunctionName: Market-value-function
      Runtime: nodejs20.x
      Environment:
        Variables:
          USER_NAME: !Ref WikiUserName
          PASSWORD: !Ref WikiPassword
      Handler: dist/marketValue/index.main
      Timeout: 900
      MemorySize: 2048
      Code:
        S3Bucket: !Ref BucketCodeName
        S3Key: dist.zip

  SendEmailLambda:
    DependsOn:
      - MarketValueLambdaIamRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt MarketValueLambdaIamRole.Arn
      FunctionName: Send-email-function
      Runtime: nodejs22.x
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
      Handler: send-email/index.handler
      Timeout: 15
      Code:
        S3Bucket: !Ref BucketCodeName
        S3Key: email.zip
  
  LogGroupInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SendEmailLambda.Arn
      Action: lambda:InvokeFunction
      Principal: logs.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Market-value-function:*'

  LogGroupFailedSubscription:
    DependsOn:
      - SendEmailLambda
    Type: AWS::Logs::SubscriptionFilter
    Properties: 
      DestinationArn: !GetAtt SendEmailLambda.Arn
      FilterPattern: Invoke Error
      LogGroupName: '/aws/lambda/Market-value-function'

  MarketValueEventRule:
    DependsOn:
      - MarketValueLambda
    Type: 'AWS::Events::Rule'
    Properties:
      Name: Market-value-scheduler
      ScheduleExpression: cron(0 19 ? * * *)
      Targets:
        - Id: market-value-function
          Arn: !GetAtt MarketValueLambda.Arn

  MarketValueInvokePermission:
    DependsOn:
      - MarketValueEventRule
      - MarketValueLambda
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:  !GetAtt MarketValueEventRule.Arn 
      FunctionName: Market-value-function

# US stocks

  UsStocksLambda:
    DependsOn:
      - MarketValueLambdaIamRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt MarketValueLambdaIamRole.Arn
      FunctionName: US-stocks-function
      Runtime: nodejs20.x
      Environment:
        Variables:
          USER_NAME: !Ref WikiUserName
          PASSWORD: !Ref WikiPassword
      Handler: dist/usMarketValue/index.main
      Timeout: 360
      MemorySize: 2048
      Code:
        S3Bucket: !Ref BucketCodeName
        S3Key: dist.zip

  UsStockLogGroupInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SendEmailLambda.Arn
      Action: lambda:InvokeFunction
      Principal: logs.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/US-stocks-function:*'

  UsStockLogGroupFailedSubscription:
    DependsOn:
      - SendEmailLambda
    Type: AWS::Logs::SubscriptionFilter
    Properties: 
      DestinationArn: !GetAtt SendEmailLambda.Arn
      FilterPattern: Invoke Error
      LogGroupName: '/aws/lambda/US-stocks-function'

  UsStocksEventRule:
    DependsOn:
      - UsStocksLambda
    Type: 'AWS::Events::Rule'
    Properties:
      Name: US-stocks-scheduler
      ScheduleExpression: cron(0 22 ? * * *)
      Targets:
        - Id: US-stocks-function
          Arn: !GetAtt UsStocksLambda.Arn

  UsStocksInvokePermission:
    DependsOn:
      - UsStocksEventRule
      - UsStocksLambda
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:  !GetAtt UsStocksEventRule.Arn 
      FunctionName: US-stocks-function

  
# Kineret level
  KineretLevelLambda:
    DependsOn:
      - MarketValueLambdaIamRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt MarketValueLambdaIamRole.Arn
      FunctionName: Kineret-level-function
      Runtime: nodejs22.x
      Environment:
        Variables:
          USER_NAME: !Ref WikiUserName
          PASSWORD: !Ref WikiPassword
      Handler: dist/kineret/kineretBot.main
      Timeout: 20
      MemorySize: 512
      Code:
        S3Bucket: !Ref BucketCodeName
        S3Key: dist.zip

  KineretLevelLogGroupInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SendEmailLambda.Arn
      Action: lambda:InvokeFunction
      Principal: logs.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Kineret-level-function:*'

  KineretLevelLogGroupFailedSubscription:
    DependsOn:
      - SendEmailLambda
    Type: AWS::Logs::SubscriptionFilter
    Properties: 
      DestinationArn: !GetAtt SendEmailLambda.Arn
      FilterPattern: Invoke Error
      LogGroupName: '/aws/lambda/Kineret-level-function'

  KineretLevelEventRule:
    DependsOn:
      - KineretLevelLambda
    Type: 'AWS::Events::Rule'
    Properties:
      Name: Kineret-level-scheduler
      ScheduleExpression: cron(0 10,11 ? * * *)
      Targets:
        - Id: Kineret-level-function
          Arn: !GetAtt KineretLevelLambda.Arn

  KineretLevelInvokePermission:
    DependsOn:
      - KineretLevelEventRule
      - KineretLevelLambda
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:  !GetAtt KineretLevelEventRule.Arn 
      FunctionName: Kineret-level-function

  
# purge birthday
  PurgeBirthdayLambda:
    DependsOn:
      - MarketValueLambdaIamRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt MarketValueLambdaIamRole.Arn
      FunctionName: purge-birthday-function
      Runtime: nodejs22.x
      Environment:
        Variables:
          USER_NAME: !Ref WikiUserName
          PASSWORD: !Ref WikiPassword
      Handler: dist/purge.main
      Timeout: 21
      MemorySize: 512
      Code:
        S3Bucket: !Ref BucketCodeName
        S3Key: dist.zip

  PurgeBirthdayLogGroupInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SendEmailLambda.Arn
      Action: lambda:InvokeFunction
      Principal: logs.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/purge-birthday-function:*'

  PurgeBirthdayEventRule:
    DependsOn:
      - PurgeBirthdayLambda
    Type: 'AWS::Events::Rule'
    Properties:
      Name: purge-birthday-scheduler
      ScheduleExpression: cron(0 0 ? * * *)
      Targets:
        - Id: purge-birthday-function
          Arn: !GetAtt PurgeBirthdayLambda.Arn

  PurgeBirthdayInvokePermission:
    DependsOn:
      - PurgeBirthdayEventRule
      - PurgeBirthdayLambda
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:  !GetAtt PurgeBirthdayEventRule.Arn 
      FunctionName: purge-birthday-function

  PurgeBirthdayLogGroupFailedSubscription:
    DependsOn:
      - SendEmailLambda
    Type: AWS::Logs::SubscriptionFilter
    Properties: 
      DestinationArn: !GetAtt SendEmailLambda.Arn
      FilterPattern: Invoke Error
      LogGroupName: '/aws/lambda/purge-birthday-function'

# protect templates
  ProtectTemplatesLambda:
    DependsOn:
      - MarketValueLambdaIamRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt MarketValueLambdaIamRole.Arn
      FunctionName: protect-templates-function
      Runtime: nodejs22.x
      Environment:
        Variables:
          USER_NAME: !Ref WikiProtectUserName
          PASSWORD: !Ref WikiProtectPassword
      Handler: dist/admin/protect.main
      Timeout: 900
      MemorySize: 1024
      Code:
        S3Bucket: !Ref BucketCodeName
        S3Key: dist.zip

  ProtectTemplatesLogGroupInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SendEmailLambda.Arn
      Action: lambda:InvokeFunction
      Principal: logs.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/protect-templates-function:*'

  ProtectTemplatesLogGroupFailedSubscription:
    DependsOn:
      - SendEmailLambda
    Type: AWS::Logs::SubscriptionFilter
    Properties: 
      DestinationArn: !GetAtt SendEmailLambda.Arn
      FilterPattern: Invoke Error
      LogGroupName: '/aws/lambda/protect-templates-function'

  ProtectTemplatesEventRule:
    DependsOn:
      - ProtectTemplatesLambda
    Type: 'AWS::Events::Rule'
    Properties:
      Name: protect-templates-scheduler
      ScheduleExpression: cron(0 6,18 ? * * *)
      Targets:
        - Id: protect-templates-function
          Arn: !GetAtt ProtectTemplatesLambda.Arn

  ProtectTemplatesInvokePermission:
    DependsOn:
      - ProtectTemplatesEventRule
      - ProtectTemplatesLambda
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:  !GetAtt ProtectTemplatesEventRule.Arn 
      FunctionName: protect-templates-function

# delete redirects
  DeleteRedirectsLambda:
    DependsOn:
      - MarketValueLambdaIamRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt MarketValueLambdaIamRole.Arn
      FunctionName: delete-redirects-function
      Runtime: nodejs22.x
      Environment:
        Variables:
          USER_NAME: !Ref WikiDeleteUserName
          PASSWORD: !Ref WikiDeletePassword
      Handler: dist/admin/deleteRedirects.main
      Timeout: 900
      MemorySize: 1024
      Code:
        S3Bucket: !Ref BucketCodeName
        S3Key: dist.zip

  DeleteRedirectsLogGroupInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SendEmailLambda.Arn
      Action: lambda:InvokeFunction
      Principal: logs.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/delete-redirects-function:*'

  DeleteRedirectsLogGroupFailedSubscription:
    DependsOn:
      - SendEmailLambda
    Type: AWS::Logs::SubscriptionFilter
    Properties: 
      DestinationArn: !GetAtt SendEmailLambda.Arn
      FilterPattern: Invoke Error
      LogGroupName: '/aws/lambda/delete-redirects-function'

  DeleteRedirectsEventRule:
    DependsOn:
      - DeleteRedirectsLambda
    Type: 'AWS::Events::Rule'
    Properties:
      Name: delete-redirects-scheduler
      ScheduleExpression: cron(0 6,18 ? * * *)
      Targets:
        - Id: delete-redirects-function
          Arn: !GetAtt DeleteRedirectsLambda.Arn

  DeleteRedirectsInvokePermission:
    DependsOn:
      - DeleteRedirectsEventRule
      - DeleteRedirectsLambda
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:  !GetAtt DeleteRedirectsEventRule.Arn 
      FunctionName: delete-redirects-function

# Copyrigh violation
  CopyrighViolationLambda:
    DependsOn:
      - MarketValueLambdaIamRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt MarketValueLambdaIamRole.Arn
      FunctionName: copyright-violation-function
      Runtime: nodejs22.x
      Environment:
        Variables:
          USER_NAME: !Ref WikiUserName
          PASSWORD: !Ref WikiPassword
      Handler: dist/maintenance/copyrightViolation.main
      Timeout: 900
      MemorySize: 1024
      Code:
        S3Bucket: !Ref BucketCodeName
        S3Key: dist.zip

  CopyrighViolationEventRule:
    DependsOn:
      - CopyrighViolationLambda
    Type: 'AWS::Events::Rule'
    Properties:
      Name: copyright-violation-scheduler
      ScheduleExpression: cron(0 6,18 ? * * *)
      Targets:
        - Id: copyright-violation-function
          Arn: !GetAtt CopyrighViolationLambda.Arn

  CopyrighViolationInvokePermission:
    DependsOn:
      - CopyrighViolationEventRule
      - CopyrighViolationLambda
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:  !GetAtt CopyrighViolationEventRule.Arn 
      FunctionName: copyright-violation-function

  # CopyrighViolationsLogGroupInvokeLambdaPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt SendEmailLambda.Arn
  #     Action: lambda:InvokeFunction
  #     Principal: logs.amazonaws.com
  #     SourceAccount: !Ref 'AWS::AccountId'
  #     SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/copyright-violation-function:*'

  # CopyrighViolationsLogGroupFailedSubscription:
  #   DependsOn:
  #     - SendEmailLambda
  #   Type: AWS::Logs::SubscriptionFilter
  #   Properties: 
  #     DestinationArn: !GetAtt SendEmailLambda.Arn
  #     FilterPattern: Invoke Error
  #     LogGroupName: '/aws/lambda/copyright-violation-function'

# Arcive logs
  ArchiveLogsLambda:
    DependsOn:
      - MarketValueLambdaIamRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt MarketValueLambdaIamRole.Arn
      FunctionName: archive-logs-function
      Runtime: nodejs22.x
      Environment:
        Variables:
          USER_NAME: !Ref WikiUserName
          PASSWORD: !Ref WikiPassword
      Handler: dist/maintenance/archiveBot/index.main
      Timeout: 900
      MemorySize: 1024
      Code:
        S3Bucket: !Ref BucketCodeName
        S3Key: dist.zip

  ArchiveLogsEventRule:
    DependsOn:
      - ArchiveLogsLambda
    Type: 'AWS::Events::Rule'
    Properties:
      Name: archive-logs-scheduler
      ScheduleExpression: cron(0 6 3 * ? *)
      Targets:
        - Id: archive-logs-function
          Arn: !GetAtt ArchiveLogsLambda.Arn

  ArchiveLogsInvokePermission:
    DependsOn:
      - ArchiveLogsEventRule
      - ArchiveLogsLambda
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:  !GetAtt ArchiveLogsEventRule.Arn 
      FunctionName: archive-logs-function

  # TODO:
  # ArchiveLogsLogGroupInvokeLambdaPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt SendEmailLambda.Arn
  #     Action: lambda:InvokeFunction
  #     Principal: logs.amazonaws.com
  #     SourceAccount: !Ref 'AWS::AccountId'
  #     SourceArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/archive-logs-function:*'

  # ArchiveLogsLogGroupFailedSubscription:
  #   DependsOn:
  #     - SendEmailLambda
  #   Type: AWS::Logs::SubscriptionFilter
  #   Properties: 
  #     DestinationArn: !GetAtt SendEmailLambda.Arn
  #     FilterPattern: Invoke Error
  #     LogGroupName: '/aws/lambda/archive-logs-function'

# Scripts lambda
  RunScriptsLambda:
    DependsOn:
      - MarketValueLambdaIamRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt MarketValueLambdaIamRole.Arn
      FunctionName: run-scripts-function
      Runtime: nodejs22.x
      Environment:
        Variables:
          USER_NAME: !Ref WikiUserName
          PASSWORD: !Ref WikiPassword
      Handler: dist/experiments/lambda.main
      Timeout: 900
      MemorySize: 1024
      Code:
        S3Bucket: !Ref BucketCodeName
        S3Key: dist.zip

# Indexes
  IndexesBotLambda:
    DependsOn:
      - MarketValueLambdaIamRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt MarketValueLambdaIamRole.Arn
      FunctionName: indexes-function
      Runtime: nodejs22.x
      Environment:
        Variables:
          USER_NAME: !Ref WikiUserName
          PASSWORD: !Ref WikiPassword
      Handler: dist/indexesBot/index.main
      Timeout: 900
      MemorySize: 1024
      Code:
        S3Bucket: !Ref BucketCodeName
        S3Key: dist.zip

  IndexesBotEventRule:
    DependsOn:
      - IndexesBotLambda
    Type: 'AWS::Events::Rule'
    Properties:
      Name: indexes-bot-scheduler
      ScheduleExpression: cron(0 18 ? * * *)
      Targets:
        - Id: indexes-function
          Arn: !GetAtt IndexesBotLambda.Arn

  IndexesBotInvokePermission:
    DependsOn:
      - IndexesBotEventRule
      - IndexesBotLambda
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:  !GetAtt IndexesBotEventRule.Arn 
      FunctionName: indexes-function

# Record carts
  RecordChartsLambda:
    DependsOn:
      - MarketValueLambdaIamRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt MarketValueLambdaIamRole.Arn
      FunctionName: record-charts-function
      Runtime: nodejs22.x
      Environment:
        Variables:
          USER_NAME: !Ref WikiUserName
          PASSWORD: !Ref WikiPassword
      Handler: dist/recordCharts/index.main
      Timeout: 120
      MemorySize: 1024
      Code:
        S3Bucket: !Ref BucketCodeName
        S3Key: dist.zip

  RecordChartsEventRule:
    DependsOn:
      - RecordChartsLambda
    Type: 'AWS::Events::Rule'
    Properties:
      Name: record-charts-scheduler
      ScheduleExpression: cron(0 18 ? * * *)
      Targets:
        - Id: record-charts-function
          Arn: !GetAtt RecordChartsLambda.Arn

  RecordChartsInvokePermission:
    DependsOn:
      - RecordChartsEventRule
      - RecordChartsLambda
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:  !GetAtt RecordChartsEventRule.Arn 
      FunctionName: record-charts-function

# Iron swords
  IronSwordsLambdaNew:
    DependsOn:
      - MarketValueLambdaIamRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt MarketValueLambdaIamRole.Arn
      FunctionName: iron-swords-function-new
      PackageType: Image
      Code:
        ImageUri: !Sub '${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/wiki-bot-playwright:${ImageVersion}'
      Environment:
        Variables:
          USER_NAME: !Ref WikiUserName
          PASSWORD: !Ref WikiPassword
      Timeout: 900
      MemorySize: 2048
      EphemeralStorage:
        Size: 2048
  IronSwordsEventRule:
    DependsOn:
      - IronSwordsLambdaNew
    Type: 'AWS::Events::Rule'
    Properties:
      Name: iron-swords-scheduler
      ScheduleExpression: cron(0 18 ? * * *)
      Targets:
        - Id: iron-swords-function-new
          Arn: !GetAtt IronSwordsLambdaNew.Arn
  IronSwordsInvokePermission:
    DependsOn:
      - IronSwordsEventRule
      - IronSwordsLambdaNew
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:  !GetAtt IronSwordsEventRule.Arn 
      FunctionName: iron-swords-function-new

# Tag bot lambda
  TagBotLambda:
    DependsOn:
      - MarketValueLambdaIamRole
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt MarketValueLambdaIamRole.Arn
      FunctionName: tag-bot-function
      Runtime: nodejs22.x
      Environment:
        Variables:
          USER_NAME: !Ref WikiUserName
          PASSWORD: !Ref WikiPassword
      Handler: dist/tag-bot/index.main
      Timeout: 900
      MemorySize: 1024
      Code:
        S3Bucket: !Ref BucketCodeName
        S3Key: dist.zip

  TagBotQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: tag-bot-queue
      VisibilityTimeout: 900

  TagBotQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref TagBotQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt TagBotQueue.Arn

  TagBotEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt TagBotQueue.Arn
      FunctionName: !GetAtt TagBotLambda.Arn

  TagBotSQSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TagBotLambda.Arn
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt TagBotQueue.Arn